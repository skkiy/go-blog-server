// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Connection interface {
	IsConnection()
}

type Edge interface {
	IsEdge()
}

type Node interface {
	IsNode()
}

type Backward struct {
	Last   int     `json:"last"`
	Before *string `json:"before"`
}

type Category struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type EdgeOrder struct {
	Key       *OrderKey      `json:"key"`
	Direction OrderDirection `json:"direction"`
}

type Forward struct {
	First int     `json:"first"`
	After *string `json:"after"`
}

type NewPost struct {
	Title      string   `json:"title"`
	Body       string   `json:"body"`
	Categories []string `json:"categories"`
}

type NewUser struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

type OrderKey struct {
	Post *PostOrderKey `json:"post"`
}

type PageCondition struct {
	Backward   *Backward `json:"backward"`
	Forward    *Forward  `json:"forward"`
	PageNumber int       `json:"pageNumber"`
	Limit      *int      `json:"limit"`
}

type PageInfo struct {
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
}

type Post struct {
	ID         string            `json:"id"`
	Title      string            `json:"title"`
	Body       string            `json:"body"`
	Categories []*Category       `json:"categories"`
	User       *User             `json:"user"`
	Status     PostPublishStatus `json:"status"`
	CreatedAt  time.Time         `json:"createdAt"`
	UpdatedAt  time.Time         `json:"updatedAt"`
}

func (Post) IsNode() {}

type PostConnection struct {
	PageInfo   *PageInfo   `json:"pageInfo"`
	Edges      []*PostEdge `json:"edges"`
	TotalCount int         `json:"totalCount"`
}

func (PostConnection) IsConnection() {}

type PostEdge struct {
	Node   *Post  `json:"node"`
	Cursor string `json:"cursor"`
}

func (PostEdge) IsEdge() {}

type PostFilterCondition struct {
	UserID string `json:"userId"`
	Status int    `json:"status"`
}

type User struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (User) IsNode() {}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PostOrderKey string

const (
	PostOrderKeyTitle     PostOrderKey = "TITLE"
	PostOrderKeyCreatedAt PostOrderKey = "CREATED_AT"
	PostOrderKeyUpdatedAt PostOrderKey = "UPDATED_AT"
)

var AllPostOrderKey = []PostOrderKey{
	PostOrderKeyTitle,
	PostOrderKeyCreatedAt,
	PostOrderKeyUpdatedAt,
}

func (e PostOrderKey) IsValid() bool {
	switch e {
	case PostOrderKeyTitle, PostOrderKeyCreatedAt, PostOrderKeyUpdatedAt:
		return true
	}
	return false
}

func (e PostOrderKey) String() string {
	return string(e)
}

func (e *PostOrderKey) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostOrderKey(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostOrderKey", str)
	}
	return nil
}

func (e PostOrderKey) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PostPublishStatus string

const (
	PostPublishStatusAnyone PostPublishStatus = "ANYONE"
	PostPublishStatusOnlyMe PostPublishStatus = "ONLY_ME"
)

var AllPostPublishStatus = []PostPublishStatus{
	PostPublishStatusAnyone,
	PostPublishStatusOnlyMe,
}

func (e PostPublishStatus) IsValid() bool {
	switch e {
	case PostPublishStatusAnyone, PostPublishStatusOnlyMe:
		return true
	}
	return false
}

func (e PostPublishStatus) String() string {
	return string(e)
}

func (e *PostPublishStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostPublishStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostPublishStatus", str)
	}
	return nil
}

func (e PostPublishStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
